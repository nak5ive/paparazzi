import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalInspectionMode
import app.cash.paparazzi.DeviceConfig
import app.cash.paparazzi.DeviceConfig.Companion
import app.cash.paparazzi.Paparazzi
import com.android.resources.NightMode
import com.android.resources.UiMode

val paparazziAnnotations = paparazziPreviewAnnotations + paparazziTestAnnotations

fun Paparazzi.snapshot(
  annotations: List<PaparazziAnnotationData>,
  localInspectionMode: Boolean = true,
  wrapper: @Composable (@Composable () -> Unit) -> Unit = { it() },
) {
  fun doSnapshot(
    data: PaparazziAnnotationData,
    preview: PreviewData? = null,
    paramName: String? = null,
    paramValue: Any? = null,
  ) {
    snapshot(snapshotName(data.functionName, preview, paramName)) {
      CompositionLocalProvider( LocalInspectionMode provides localInspectionMode) {
        Box(
          modifier = Modifier
            .fillMaxSize()
            .then(
              preview?.backgroundColor?.toLong(16)
                ?.let(::Color)
                ?.let { Modifier.background(it) }
                ?: Modifier
            )
        ) {
          wrapper { data.composable(paramValue) }
        }
      }
    }
  }

  annotations.flatMap { data ->
    val previews = if (data.previews.isEmpty()) listOf<PreviewData?>(null) else data.previews
    previews.map { data to it }
  }.forEach { (data, preview) ->
    unsafeUpdateConfig(deviceConfig(preview))

    data.previewParameter?.let { pp ->
      pp.provider.values.forEachIndexed { i, value ->
        doSnapshot(data, preview, "${pp.name}$i", value)
      }
    } ?: doSnapshot(data, preview)
  }
}

private fun Paparazzi.deviceConfig(preview: PreviewData?) =
  (preview?.device?.deviceConfig() ?: DeviceConfig.NEXUS_5).let {
    it.copy(
      fontScale = preview?.fontScale ?: it.fontScale,
      uiMode = preview?.uiMode?.uiMode() ?: it.uiMode,
      nightMode = preview?.uiMode?.nightMode() ?: it.nightMode,
      locale = preview?.locale ?: it.locale,
    )
  }

private fun snapshotName(
  functionName: String,
  preview: PreviewData?,
  paramName: String? = null
): String {
  val args = buildList<String> {
    preview?.fontScale?.let { "fs_$it" }?.let(::add)
    preview?.uiMode?.nightMode()?.shortDisplayValue?.let(::add)
    preview?.uiMode?.uiMode()?.shortDisplayValue?.let(::add)
    preview?.device?.let { add(it.substringAfterLast(":")) }
    preview?.locale?.let(::add)
    preview?.backgroundColor?.let { add("bg_$it") }
    paramName?.let(::add)
  }.takeIf { it.isNotEmpty() }
    ?.joinToString(",", "[", "]")
    ?: ""

  return functionName + args
}
