import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.ui.platform.LocalInspectionMode
import app.cash.paparazzi.DeviceConfig
import app.cash.paparazzi.DeviceConfig.Companion
import app.cash.paparazzi.Paparazzi
import com.android.resources.NightMode
import com.android.resources.UiMode

val paparazziAnnotations = paparazziPreviewAnnotations + paparazziTestAnnotations

fun Paparazzi.snapshot(
  annotations: List<PaparazziAnnotationData>,
  localInspectionMode: Boolean = true,
  wrapper: (@Composable (@Composable () -> Unit) -> Unit) = { it() },
) {
  annotations.flatMap { data ->
    val previews = if (data.previews.isEmpty()) listOf<PreviewData?>(null) else data.previews
    previews.map { data to it }
  }.forEach { (data, preview) ->
    unsafeUpdateConfig(preview.deviceConfig())

    data.previewParameter?.let { pp ->
      pp.provider.values.forEachIndexed { i, value ->
        val paramName = "${data.previewParameter!!.name}$i"
        snapshot(snapshotName(data.functionName, preview, paramName)) {
          CompositionLocalProvider(LocalInspectionMode provides localInspectionMode) {
            wrapper { data.composable(value) }
          }
        }
      }
    } ?: snapshot(snapshotName(data.functionName, preview)) {
      CompositionLocalProvider(LocalInspectionMode provides localInspectionMode) {
        wrapper { data.composable(null) }
      }
    }
  }
}

private fun PreviewData?.deviceConfig() =
  (this?.device?.deviceConfig() ?: DeviceConfig.NEXUS_5)
    .let { config ->
      this?.fontScale?.let { config.copy(fontScale = it) } ?: config
    }
    .let { config ->
      this?.uiMode?.uiMode()?.let { config.copy(uiMode = it) } ?: config
    }
    .let { config ->
      this?.uiMode?.nightMode()?.let { config.copy(nightMode = it) } ?: config
    }
    .let { config ->
      this?.locale?.let { config.copy(locale = it) } ?: config
    }

private fun snapshotName(
  functionName: String,
  preview: PreviewData?,
  paramName: String? = null
): String {
  val args = buildList<String> {
    preview?.fontScale?.let { "scale$it" }?.let(::add)
    preview?.uiMode?.nightMode()?.shortDisplayValue?.let(::add)
    preview?.uiMode?.uiMode()?.shortDisplayValue?.let(::add)
    preview?.device?.let { add(it.substringAfterLast(":")) }
    preview?.locale?.let(::add)
    paramName?.let(::add)
  }.takeIf { it.isNotEmpty() }
    ?.joinToString(",", "[", "]")
    ?: ""

  return functionName + args
}
