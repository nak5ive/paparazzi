import android.content.res.Configuration
import app.cash.paparazzi.DeviceConfig
import com.android.resources.NightMode
import com.android.resources.UiMode

internal fun String.deviceConfig() = when(this) {
  "id:Nexus 7" -> DeviceConfig.NEXUS_7
  "id:Nexus 7 2013" -> DeviceConfig.NEXUS_7_2012
  "id:Nexus 5" -> DeviceConfig.NEXUS_5
  "id:Nexus 6" -> DeviceConfig.NEXUS_7
  "id:Nexus 9" -> DeviceConfig.NEXUS_10
  "name:Nexus 10" -> DeviceConfig.NEXUS_10
  "id:Nexus 5X" -> DeviceConfig.NEXUS_5
  "id:Nexus 6P" -> DeviceConfig.NEXUS_7
  "id:pixel_c" -> DeviceConfig.PIXEL_C
  "id:pixel" -> DeviceConfig.PIXEL
  "id:pixel_xl" -> DeviceConfig.PIXEL_XL
  "id:pixel_2" -> DeviceConfig.PIXEL_2
  "id:pixel_2_xl" -> DeviceConfig.PIXEL_2_XL
  "id:pixel_3" -> DeviceConfig.PIXEL_3
  "id:pixel_3_xl" -> DeviceConfig.PIXEL_3_XL
  "id:pixel_3a" -> DeviceConfig.PIXEL_3A
  "id:pixel_3a_xl" -> DeviceConfig.PIXEL_3A_XL
  "id:pixel_4" -> DeviceConfig.PIXEL_4
  "id:pixel_4_xl" -> DeviceConfig.PIXEL_4_XL
  "id:wearos_small_round" -> DeviceConfig.WEAR_OS_SMALL_ROUND
  "id:wearos_square" -> DeviceConfig.WEAR_OS_SQUARE
  else -> null
}

internal fun Int.uiMode() = when(this and Configuration.UI_MODE_TYPE_MASK) {
  Configuration.UI_MODE_TYPE_NORMAL -> UiMode.NORMAL
  Configuration.UI_MODE_TYPE_CAR -> UiMode.CAR
  Configuration.UI_MODE_TYPE_DESK -> UiMode.DESK
  Configuration.UI_MODE_TYPE_APPLIANCE -> UiMode.APPLIANCE
  Configuration.UI_MODE_TYPE_WATCH -> UiMode.WATCH
  Configuration.UI_MODE_TYPE_VR_HEADSET -> UiMode.VR_HEADSET
  else -> null
}

internal fun Int.nightMode() = when(this and Configuration.UI_MODE_NIGHT_MASK) {
  Configuration.UI_MODE_NIGHT_NO -> NightMode.NOTNIGHT
  Configuration.UI_MODE_NIGHT_YES -> NightMode.NIGHT
  else -> null
}

/**
 * Maps [fontScale] to enum values similar to Preview
 * see:
    https://android.googlesource.com/platform/tools/adt/idea/+/refs/heads/mirror-goog-studio-main/compose-designer/src/com/android/tools/idea/compose/pickers/preview/enumsupport/PsiEnumValues.kt
 */
internal fun Float.fontScale() =
  FontScale.values().find { this == it.value } ?: FontScale.CUSTOM.apply { value = this@fontScale }

internal enum class FontScale(var value: Float?) {
  DEFAULT(1f), SMALL(0.85f), LARGE(1.15f), LARGEST(1.30f), CUSTOM(null);

  fun displayName() = when (this) {
    CUSTOM -> "fs_$value"
    else -> name
  }
}
